swagger: "2.0"
info:
  version: "0.0.1"
  title: yodle
  description: Here to solve all of your logging needs
host: localhost:10010
basePath: /
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  X-Access-Token:
    name: X-Access-Token
    in: header
    description: The token to prove you're a user
    type: apiKey
security:
  - X-Access-Token: []
tags:
  - name: project
    description: project operations
  - name: logging
    description: Loggin operations
  - name: users
    description: User operations
  - name: authentication
    description: Authentication operations
  - name: tags
    description: Gives you what you need to stay organized
paths:
  /projects/{projectId}:
    x-swagger-router-controller: projects
    get:
      tags:
        - project
      summary: Get a project by id
      description: Pass in the project id and get back a project object
      operationId: getProject
      parameters:
        - name: projectId
          in: path
          description: Id of project to fetch
          type: string
          required: true
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Project"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /projects/{projectId}/tags:
    x-swagger-router-controller: projects
    get:
      tags:
        - project
        - tags
      summary: Get tags for project by id
      description: Pass in the project id and get back a list of tags
      operationId: getProjectTags
      parameters:
        - name: projectId
          in: path
          description: Id of project to peek into
          type: string
          required: true
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              type: object
              properties:
                count:
                  type: number
                tag:
                  type: string
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /projects/{projectId}/entries:
    x-swagger-router-controller: projects
    parameters:
      - name: projectId
        in: path
        description: Id of project to fetch entries from
        type: string
        required: true
    get:
      tags:
        - project
        - logging
      summary: Get a project's entries
      description: Pass in the project id and get back an array of project entries objects
      operationId: getProjectEntries
      parameters:
        - name: metaOnly
          in: query
          required: false
          description: whether or not to return only the count
          type: string
      responses:
        200:
          description: Success
          schema:
            type: object
            properties:
              count:
                type: number
              entries:
                type: array
                items:
                  $ref: "#/definitions/Entry"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - project
        - logging
      summary: post an entry to a project
      operationId: createLog
      parameters:
        - name: entry
          in: body
          description: entry to persist
          schema:
            $ref: "#/definitions/Entry"
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Entry"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /projects/{projectId}/entries/{entryId}:
    x-swagger-router-controller: projects
    get:
      tags:
        - project
        - logging
      summary: get an entry from a project
      operationId: getProjectEntry
      parameters:
        - name: projectId
          in: path
          description: Id of the project to look into
          type: string
          required: true
        - name: entryId
          in: path
          description: Id of the entry to look into
          type: string
          required: true
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Entry"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /projects/{projectId}/users:
    x-swagger-router-controller: projects
    get:
      tags:
        - project
        - users
      summary: Get a project's users
      operationId: getProjectUsers
      parameters:
        - name: projectId
          in: path
          description: Id of project to fetch users from
          type: string
          required: true
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              type: string
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - users
        - project
      summary: Add a user to a project
      operationId: addProjectUser
      parameters:
        - name: projectId
          in: path
          description: Id of project to fetch users from
          type: string
          required: true
        - name: user
          in: body
          description: the user's email to add
          required: true
          schema:
            $ref: "#/definitions/AddUserRequest"
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/SuccessResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - users
        - project
      summary: Remove a user from a project
      operationId: removeProjectUser
      parameters:
        - name: projectId
          in: path
          description: Id of project to modify
          type: string
          required: true
        - name: user
          in: query
          description: the user's email to remove
          required: true
          type: string
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/SuccessResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /projects:
    x-swagger-router-controller: projects
    get:
      tags:
        - project
      summary: Get all project
      operationId: getProjects
      parameters:
        - name: search
          in: query
          description: Partial ID of project to fetch, must be from the end of the ID
          type: string
          required: false
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/Project"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - project
      summary: Create a project
      operationId: createProject
      parameters:
        - name: project
          in: body
          description: project to create
          schema:
            $ref: "#/definitions/Project"
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/User"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /users/{userId}:
    x-swagger-router-controller: users
    get:
      tags:
        - users
      summary: Fetch a user
      operationId: getUser
      parameters:
        - name: userId
          in: path
          description: Id of user to fetch. Can be "me" if authenticated
          type: string
          required: true
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/User"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    patch:
      tags:
        - users
      summary: Update a user's email or password
      operationId: editUser
      parameters:
        - name: userId
          in: path
          description: Id of user to update. Can be "me" if authenticated
          type: string
          required: true
        - name: user
          in: body
          description: User to update with params; all params are optional
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/SuccessResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /users/auth:
    x-swagger-router-controller: users
    post:
      tags:
        - users
        - authentication
      summary: Authenticate a user
      description: Submits the user's credentials in exchange for a token to be used in the 'x-access-token' header in subsequent requests
      operationId: auth
      security: []
      parameters:
        - name: credentials
          in: body
          description: The credentials of the user to log in
          schema:
            $ref: "#/definitions/AuthenticationRequest"
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/AuthenticationResponseSuccess"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /users:
    x-swagger-router-controller: users
    get:
      tags:
        - users
      summary: Gets all of the users the current user has permission to see
      operationId: listUsers
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - users
      summary: Creates a user
      description: Creates a user. Can be done without authentication; this is where you'll create a new user for yourself.
      operationId: createUser
      security: []
      parameters:
        - name: user
          in: body
          description: User to create
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/User"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
definitions:
  AddUserRequest:
    type: object
    required:
      - email
    properties:
      email:
        type: string
  AuthenticationRequest:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
      password:
        type: string
  AuthenticationResponseSuccess:
    properties:
      token:
        type: string
  SuccessResponse:
    properties:
      status:
        type: number
      message:
        type: string
  ErrorResponse:
    properties:
      status:
        type: number
      message:
        type: string
  User:
    type: object
    properties:
      email:
        type: string
      password:
        type: string
  Project:
    type: object
    properties:
      _id:
        type: string
      users:
        type: array
        items:
          type: string
      name:
        type: string
      entries:
        type: array
        items:
          $ref: "#/definitions/Entry"
  Entry:
    type: object
